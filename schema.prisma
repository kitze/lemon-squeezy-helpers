model LemonSqueezyOrder {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  orderId    String   @unique
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  refunded   Boolean  @default(false)
  attributes Json
}

enum LemonSqueezySubscriptionStatus {
  on_trial
  active
  paused
  past_due
  unpaid
  cancelled
  expired
}

model LemonSqueezyVariant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  price     Int
  variantId String @unique

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  subscriptions LemonSqueezySubscription[]
  attributes    Json?
}

model LemonSqueezyProduct {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String
  productId String @unique

  variants      LemonSqueezyVariant[]
  subscriptions LemonSqueezySubscription[]

  attributes Json?
}

model LemonSqueezyPayment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscription   LemonSqueezySubscription @relation(fields: [subscriptionId], references: [id])
  subscriptionId String

  paymentId  String @unique
  attributes Json?
}

model LemonSqueezySubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptionId String? @unique

  user   User   @relation(fields: [userId], references: [id])
  userId String

  product   LemonSqueezyProduct @relation(fields: [productId], references: [id])
  productId String

  variant   LemonSqueezyVariant @relation(fields: [variantId], references: [id])
  variantId String

  attributes Json?
  status     LemonSqueezySubscriptionStatus

  payments LemonSqueezyPayment[]
}
